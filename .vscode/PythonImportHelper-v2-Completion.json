[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "reveal_type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "SQLModel",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "isExtraImport": true,
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "ttkbootstrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "BoardController",
        "importPath": "src.controllers",
        "description": "src.controllers",
        "isExtraImport": true,
        "detail": "src.controllers",
        "documentation": {}
    },
    {
        "label": "CoordinateController",
        "importPath": "src.controllers",
        "description": "src.controllers",
        "isExtraImport": true,
        "detail": "src.controllers",
        "documentation": {}
    },
    {
        "label": "FileController",
        "importPath": "src.controllers",
        "description": "src.controllers",
        "isExtraImport": true,
        "detail": "src.controllers",
        "documentation": {}
    },
    {
        "label": "MainController",
        "importPath": "src.controllers",
        "description": "src.controllers",
        "isExtraImport": true,
        "detail": "src.controllers",
        "documentation": {}
    },
    {
        "label": "AppSettingsModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "BoardModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "CoordinateModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "ImageModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "LotModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "WorkerModel",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "CoordinateCanvasView",
        "importPath": "src.views",
        "description": "src.views",
        "isExtraImport": true,
        "detail": "src.views",
        "documentation": {}
    },
    {
        "label": "MainView",
        "importPath": "src.views",
        "description": "src.views",
        "isExtraImport": true,
        "detail": "src.views",
        "documentation": {}
    },
    {
        "label": "SidebarView",
        "importPath": "src.views",
        "description": "src.views",
        "isExtraImport": true,
        "detail": "src.views",
        "documentation": {}
    },
    {
        "label": "DateSelectDialog",
        "importPath": "src.views.dialogs",
        "description": "src.views.dialogs",
        "isExtraImport": true,
        "detail": "src.views.dialogs",
        "documentation": {}
    },
    {
        "label": "SettingsDialog",
        "importPath": "src.views.dialogs",
        "description": "src.views.dialogs",
        "isExtraImport": true,
        "detail": "src.views.dialogs",
        "documentation": {}
    },
    {
        "label": "WorkerInputDialog",
        "importPath": "src.views.dialogs",
        "description": "src.views.dialogs",
        "isExtraImport": true,
        "detail": "src.views.dialogs",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"image-coords-app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"image-coords-app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"image-coords-app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"image-coords-app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"image-coords-app\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "BoardController",
        "kind": 6,
        "importPath": "src.controllers.board_controller",
        "description": "src.controllers.board_controller",
        "peekOfCode": "class BoardController:\n    \"\"\"基盤管理を行うコントローラー\"\"\"\n    def __init__(\n        self,\n        board_model: \"BoardModel\",\n        coordinate_model: \"CoordinateModel\",\n        image_model: \"ImageModel\",\n    ):\n        self.board_model = board_model\n        self.coordinate_model = coordinate_model",
        "detail": "src.controllers.board_controller",
        "documentation": {}
    },
    {
        "label": "CoordinateController",
        "kind": 6,
        "importPath": "src.controllers.coordinate_controller",
        "description": "src.controllers.coordinate_controller",
        "peekOfCode": "class CoordinateController:\n    \"\"\"座標操作を管理するコントローラー\"\"\"\n    def __init__(self, coordinate_model: \"CoordinateModel\", image_model: \"ImageModel\"):\n        self.coordinate_model = coordinate_model\n        self.image_model = image_model\n        # ビューへの参照（後で設定）\n        self.canvas_view: Optional[\"CoordinateCanvasView\"] = None\n        self.sidebar_view: Optional[\"SidebarView\"] = None\n        self.main_view: Optional[\"MainView\"] = None\n        # 現在の基盤番号（自動保存用）",
        "detail": "src.controllers.coordinate_controller",
        "documentation": {}
    },
    {
        "label": "FileController",
        "kind": 6,
        "importPath": "src.controllers.file_controller",
        "description": "src.controllers.file_controller",
        "peekOfCode": "class FileController:\n    \"\"\"ファイル操作を管理するコントローラー（FileManager統合版）\"\"\"\n    def __init__(\n        self,\n        coordinate_model: \"CoordinateModel\",\n        settings_model: \"AppSettingsModel\",\n        worker_model: \"WorkerModel\",\n        board_model: \"BoardModel\",\n        lot_model: \"LotModel\",\n    ):",
        "detail": "src.controllers.file_controller",
        "documentation": {}
    },
    {
        "label": "MainController",
        "kind": 6,
        "importPath": "src.controllers.main_controller",
        "description": "src.controllers.main_controller",
        "peekOfCode": "class MainController:\n    \"\"\"メインアプリケーションコントローラー\"\"\"\n    # region コンストラクタ\n    def __init__(\n        self,\n        coordinate_model: \"CoordinateModel\",\n        settings_model: \"AppSettingsModel\",\n        worker_model: \"WorkerModel\",\n        image_model: \"ImageModel\",\n        board_model: \"BoardModel\",",
        "detail": "src.controllers.main_controller",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "src.db.init_db",
        "description": "src.db.init_db",
        "peekOfCode": "def init_db():\n    SQLModel.metadata.create_all(engine)\nif __name__ == \"__main__\":\n    init_db()\n    print(\"DB初期化完了\")",
        "detail": "src.db.init_db",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "src.db.init_db",
        "description": "src.db.init_db",
        "peekOfCode": "DB_URL = \"sqlite:///app_data.db\"\nengine = create_engine(DB_URL, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\nif __name__ == \"__main__\":\n    init_db()\n    print(\"DB初期化完了\")",
        "detail": "src.db.init_db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.db.init_db",
        "description": "src.db.init_db",
        "peekOfCode": "engine = create_engine(DB_URL, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\nif __name__ == \"__main__\":\n    init_db()\n    print(\"DB初期化完了\")",
        "detail": "src.db.init_db",
        "documentation": {}
    },
    {
        "label": "Lot",
        "kind": 6,
        "importPath": "src.db.models",
        "description": "src.db.models",
        "peekOfCode": "class Lot(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    model: str\n    image_path: str\n    lot_no: str\n    worker_no: str\nclass Worker(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    worker_no: str",
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "Worker",
        "kind": 6,
        "importPath": "src.db.models",
        "description": "src.db.models",
        "peekOfCode": "class Worker(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    worker_no: str\nclass Coordinate(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    lot_id: int\n    x: int\n    y: int\n    detail: Optional[str] = None",
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "Coordinate",
        "kind": 6,
        "importPath": "src.db.models",
        "description": "src.db.models",
        "peekOfCode": "class Coordinate(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    lot_id: int\n    x: int\n    y: int\n    detail: Optional[str] = None\n# 必要に応じて他のモデルも追加可能",
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "AppSettingsModel",
        "kind": 6,
        "importPath": "src.models.app_settings_model",
        "description": "src.models.app_settings_model",
        "peekOfCode": "class AppSettingsModel:\n    \"\"\"アプリケーション設定を管理するモデル\"\"\"\n    def __init__(self):\n        self._config = configparser.ConfigParser()\n        # プロジェクトルートディレクトリを取得\n        current_dir = os.path.dirname(os.path.abspath(__file__))\n        project_root = os.path.dirname(os.path.dirname(current_dir))\n        self._settings_file = os.path.join(\n            project_root, \"settings/image_coords_settings.ini\"\n        )",
        "detail": "src.models.app_settings_model",
        "documentation": {}
    },
    {
        "label": "BoardModel",
        "kind": 6,
        "importPath": "src.models.board_model",
        "description": "src.models.board_model",
        "peekOfCode": "class BoardModel:\n    \"\"\"基盤データを管理するモデル\"\"\"\n    def __init__(self):\n        self._current_board_number: int = 1\n        self._boards_data: Dict[int, Dict[str, Any]] = {}\n        self._board_history: List[int] = []\n        self._project_root = os.path.dirname(\n            os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n        )\n    @property",
        "detail": "src.models.board_model",
        "documentation": {}
    },
    {
        "label": "CoordinateModel",
        "kind": 6,
        "importPath": "src.models.coordinate_model",
        "description": "src.models.coordinate_model",
        "peekOfCode": "class CoordinateModel:\n    \"\"\"座標データを管理するモデル\"\"\"\n    def __init__(self):\n        self._coordinates: List[Tuple[int, int]] = []\n        self._coordinate_details: List[Dict[str, Any]] = []\n        self._current_index: int = -1\n        self._image_path: str = \"\"\n        self._undo_stack: List[List[Tuple[int, int]]] = []\n        self._redo_stack: List[List[Tuple[int, int]]] = []\n    @property",
        "detail": "src.models.coordinate_model",
        "documentation": {}
    },
    {
        "label": "ImageModel",
        "kind": 6,
        "importPath": "src.models.image_model",
        "description": "src.models.image_model",
        "peekOfCode": "class ImageModel:\n    \"\"\"画像データを管理するモデル\"\"\"\n    def __init__(self):\n        self._current_image_path: str = \"\"\n        self._original_size: Tuple[int, int] = (0, 0)\n        self._display_size: Tuple[int, int] = (0, 0)\n        self._scale_factor: float = 1.0\n        self._tk_image: Optional[ImageTk.PhotoImage] = None\n        self._image_files: List[Dict[str, str]] = []\n        # サポートする画像形式",
        "detail": "src.models.image_model",
        "documentation": {}
    },
    {
        "label": "LotModel",
        "kind": 6,
        "importPath": "src.models.lot_model",
        "description": "src.models.lot_model",
        "peekOfCode": "class LotModel:\n    \"\"\"ロット情報を管理するモデル\"\"\"\n    def __init__(self, model:str=\"\", image_path:str=\"\", lot_no:str=\"\", worker_no:str=\"\"):\n        self._model = model\n        self._image_path = image_path\n        self._lot_no = lot_no\n        self._worker_no = worker_no\n    @property\n    def model(self) -> str:\n        if self.is_settings_complete():",
        "detail": "src.models.lot_model",
        "documentation": {}
    },
    {
        "label": "WorkerModel",
        "kind": 6,
        "importPath": "src.models.worker_model",
        "description": "src.models.worker_model",
        "peekOfCode": "class WorkerModel:\n    \"\"\"作業者データを管理するモデル\"\"\"\n    def __init__(self):\n        current_dir = os.path.dirname(os.path.abspath(__file__))\n        project_root = os.path.dirname(os.path.dirname(current_dir))\n        self._worker_file = os.path.join(project_root, \"settings/worker.txt\")\n        self._current_worker_no: str = \"\"\n        self._workers: Dict[str, str] = {}  # worker_no: worker_name\n        self._load_workers()\n    def _load_workers(self):",
        "detail": "src.models.worker_model",
        "documentation": {}
    },
    {
        "label": "MainApp",
        "kind": 6,
        "importPath": "src.ui.main_ttk",
        "description": "src.ui.main_ttk",
        "peekOfCode": "class MainApp(tb.Window):\n    def __init__(self):\n        super().__init__(themename=\"cosmo\")\n        self.title(\"Image Coords App (ttkbootstrap版)\")\n        self.geometry(\"900x600\")\n        self._setup_ui()\n    def _setup_ui(self):\n        frame = tb.Frame(self, padding=20)\n        frame.pack(fill=BOTH, expand=True)\n        label = tb.Label(frame, text=\"座標管理システム\", font=(\"Arial\", 20, \"bold\"))",
        "detail": "src.ui.main_ttk",
        "documentation": {}
    },
    {
        "label": "TtkBootstrapApp",
        "kind": 6,
        "importPath": "src.ui.ttk_bootstrap_app",
        "description": "src.ui.ttk_bootstrap_app",
        "peekOfCode": "class TtkBootstrapApp:\n    \"\"\"ttkbootstrap版メインアプリケーション\"\"\"\n    def __init__(self, theme: str = \"flatly\"):\n        \"\"\"\n        アプリケーションを初期化\n        Args:\n            theme: ttkbootstrapテーマ名\n                  - flatly (デフォルト、モダンでクリーンなデザイン)\n                  - darkly (ダークテーマ)\n                  - pulse (赤アクセント)",
        "detail": "src.ui.ttk_bootstrap_app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "src.ui.ttk_bootstrap_app",
        "description": "src.ui.ttk_bootstrap_app",
        "peekOfCode": "def create_app(theme: str = \"flatly\") -> TtkBootstrapApp:\n    \"\"\"ttkbootstrapアプリケーションを作成\"\"\"\n    return TtkBootstrapApp(theme)\ndef main():\n    \"\"\"メイン関数 - アプリケーションの実行例\"\"\"\n    app = create_app(\"flatly\")  # モダンなフラットデザイン\n    app.run()\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.ui.ttk_bootstrap_app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.ui.ttk_bootstrap_app",
        "description": "src.ui.ttk_bootstrap_app",
        "peekOfCode": "def main():\n    \"\"\"メイン関数 - アプリケーションの実行例\"\"\"\n    app = create_app(\"flatly\")  # モダンなフラットデザイン\n    app.run()\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.ui.ttk_bootstrap_app",
        "documentation": {}
    },
    {
        "label": "DateSelectDialog",
        "kind": 6,
        "importPath": "src.views.dialogs.date_select_dialog",
        "description": "src.views.dialogs.date_select_dialog",
        "peekOfCode": "class DateSelectDialog:\n    \"\"\"日付選択ダイアログ\"\"\"\n    def __init__(self, parent: tk.Tk, current_date: Optional[date] = None):\n        self.parent = parent\n        self.current_date = current_date or date.today()\n        self.selected_date = self.current_date\n        self.result = None\n        self.dialog = None\n        # 年月日変数\n        self.year_var = tk.StringVar()",
        "detail": "src.views.dialogs.date_select_dialog",
        "documentation": {}
    },
    {
        "label": "ItemTagSwitchDialog",
        "kind": 6,
        "importPath": "src.views.dialogs.item_tag_switch_dialog",
        "description": "src.views.dialogs.item_tag_switch_dialog",
        "peekOfCode": "class ItemTagSwitchDialog:\n    \"\"\"現品票切り替えダイアログクラス\"\"\"\n    def __init__(self, parent: tk.Tk):\n        self.parent = parent\n        self.result = None\n        # ダイアログウィンドウを作成\n        self.dialog = tk.Toplevel(parent)\n        self.dialog.title(\"現品票で切り替え\")\n        self.dialog.geometry(\"400x200\")\n        self.dialog.resizable(False, False)",
        "detail": "src.views.dialogs.item_tag_switch_dialog",
        "documentation": {}
    },
    {
        "label": "show_item_tag_switch_dialog",
        "kind": 2,
        "importPath": "src.views.dialogs.item_tag_switch_dialog",
        "description": "src.views.dialogs.item_tag_switch_dialog",
        "peekOfCode": "def show_item_tag_switch_dialog(parent: tk.Tk) -> Optional[Tuple[str, str]]:\n    \"\"\"現品票切り替えダイアログを表示する便利関数\n    Args:\n        parent: 親ウィンドウ\n    Returns:\n        Optional[Tuple[str, str]]: (製番, 指図) のタプル。キャンセル時はNone\n    \"\"\"\n    dialog = ItemTagSwitchDialog(parent)\n    return dialog.show()",
        "detail": "src.views.dialogs.item_tag_switch_dialog",
        "documentation": {}
    },
    {
        "label": "SettingsDialog",
        "kind": 6,
        "importPath": "src.views.dialogs.settings_dialog",
        "description": "src.views.dialogs.settings_dialog",
        "peekOfCode": "class SettingsDialog:\n    \"\"\"設定ダイアログ\"\"\"\n    def __init__(self, parent: tk.Tk, settings_model=None, callback: Optional[Callable] = None):\n        self.parent = parent\n        self.settings_model = settings_model\n        self.callback = callback\n        self.dialog = None\n        # 設定変数\n        self.image_directory_var = tk.StringVar()\n        self.data_directory_var = tk.StringVar()",
        "detail": "src.views.dialogs.settings_dialog",
        "documentation": {}
    },
    {
        "label": "WorkerInputDialog",
        "kind": 6,
        "importPath": "src.views.dialogs.worker_input_dialog",
        "description": "src.views.dialogs.worker_input_dialog",
        "peekOfCode": "class WorkerInputDialog:\n    \"\"\"作業者入力ダイアログ\"\"\"\n    def __init__(self, parent: tk.Tk, worker_model=None):\n        self.parent = parent\n        self.worker_model = worker_model\n        self.result = None\n        self.dialog = None\n        # 入力変数\n        self.worker_input_var = tk.StringVar()\n    def show(self) -> Optional[Dict[str, Any]]:",
        "detail": "src.views.dialogs.worker_input_dialog",
        "documentation": {}
    },
    {
        "label": "CoordinateCanvasView",
        "kind": 6,
        "importPath": "src.views.coordinate_canvas_view",
        "description": "src.views.coordinate_canvas_view",
        "peekOfCode": "class CoordinateCanvasView:\n    \"\"\"座標キャンバスを管理するビュー\"\"\"\n    def __init__(self, parent_frame: tk.Frame):\n        self.parent_frame = parent_frame\n        self.canvas_width = 800\n        self.canvas_height = 600\n        # キャンバス\n        self.canvas = tk.Canvas(\n            parent_frame, width=self.canvas_width, height=self.canvas_height, bg=\"white\"\n        )",
        "detail": "src.views.coordinate_canvas_view",
        "documentation": {}
    },
    {
        "label": "CallbackProtocol",
        "kind": 6,
        "importPath": "src.views.main_view",
        "description": "src.views.main_view",
        "peekOfCode": "class CallbackProtocol(Protocol):\n    \"\"\"コールバック関数のプロトコル\"\"\"\n    def __call__(self) -> Any: ...\nclass ParameterCallbackProtocol(Protocol):\n    \"\"\"パラメータを受け取るコールバック関数のプロトコル\"\"\"\n    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...\n# 具体的なコールバック関数の型定義\nclass CallbackTypes(TypedDict, total=False):\n    \"\"\"コールバック関数の型定義辞書\"\"\"\n    # ファイル操作",
        "detail": "src.views.main_view",
        "documentation": {}
    },
    {
        "label": "ParameterCallbackProtocol",
        "kind": 6,
        "importPath": "src.views.main_view",
        "description": "src.views.main_view",
        "peekOfCode": "class ParameterCallbackProtocol(Protocol):\n    \"\"\"パラメータを受け取るコールバック関数のプロトコル\"\"\"\n    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...\n# 具体的なコールバック関数の型定義\nclass CallbackTypes(TypedDict, total=False):\n    \"\"\"コールバック関数の型定義辞書\"\"\"\n    # ファイル操作\n    open_file: CallbackProtocol\n    save_file: CallbackProtocol\n    exit_app: CallbackProtocol",
        "detail": "src.views.main_view",
        "documentation": {}
    },
    {
        "label": "CallbackTypes",
        "kind": 6,
        "importPath": "src.views.main_view",
        "description": "src.views.main_view",
        "peekOfCode": "class CallbackTypes(TypedDict, total=False):\n    \"\"\"コールバック関数の型定義辞書\"\"\"\n    # ファイル操作\n    open_file: CallbackProtocol\n    save_file: CallbackProtocol\n    exit_app: CallbackProtocol\n    delete_file: CallbackProtocol\n    # 編集操作\n    undo_action: CallbackProtocol\n    redo_action: CallbackProtocol",
        "detail": "src.views.main_view",
        "documentation": {}
    },
    {
        "label": "MainView",
        "kind": 6,
        "importPath": "src.views.main_view",
        "description": "src.views.main_view",
        "peekOfCode": "class MainView:\n    \"\"\"メインビューを管理するクラス\"\"\"\n    def __init__(self, root: tk.Tk):\n        self.root = root\n        self.root.title(\"Image Coordinate App\")\n        self.root.geometry(\"1400x900\")\n        # ウィンドウを最大化\n        self.root.state(\"zoomed\")  # Windows用の最大化\n        # 定数 - 既存UIと同じサイズ\n        self.SIDEBAR_WIDTH = 250",
        "detail": "src.views.main_view",
        "documentation": {}
    },
    {
        "label": "SidebarView",
        "kind": 6,
        "importPath": "src.views.sidebar_view",
        "description": "src.views.sidebar_view",
        "peekOfCode": "class SidebarView:\n    \"\"\"サイドバーを管理するビュー\"\"\"\n    def __init__(self, parent_frame: tk.Frame):\n        self.parent_frame = parent_frame\n        # 変数\n        self.item_number_var = tk.StringVar()\n        self.reference_var = tk.StringVar()\n        self.defect_var = tk.StringVar()\n        self.serial_var = tk.StringVar()\n        # ロット番号（表示用）",
        "detail": "src.views.sidebar_view",
        "documentation": {}
    },
    {
        "label": "demonstrate_type_benefits",
        "kind": 2,
        "importPath": "demonstrate_types",
        "description": "demonstrate_types",
        "peekOfCode": "def demonstrate_type_benefits():\n    \"\"\"型推定改善のメリットを実演\"\"\"\n    print(\"🎯 MainView 型推定改善のメリット実演\")\n    print(\"=\" * 60)\n    root = tk.Tk()\n    root.withdraw()\n    main_view = MainView(root)\n    print(\"📋 改善前と改善後の比較:\")\n    print()\n    print(\"【改善前】\")",
        "detail": "demonstrate_types",
        "documentation": {}
    },
    {
        "label": "ImageCoordsApp",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ImageCoordsApp:\n    \"\"\"MVCアーキテクチャによる画像座標アプリケーション\"\"\"\n    def __init__(self):\n        self.root = tk.Tk()\n        self.root.title(\"画像座標アプリケーション (MVC)\")\n        # サブディスプレイにフルスクリーンで表示設定\n        self._setup_display()\n        # アプリケーションのセットアップ\n        self._setup_application()\n    def _setup_display(self):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    \"\"\"メイン関数\"\"\"\n    try:\n        app = ImageCoordsApp()\n        app.run()\n    except KeyboardInterrupt:\n        print(\"アプリケーションが中断されました。\")\n    except Exception as e:\n        print(f\"予期しないエラーが発生しました: {e}\")\n        messagebox.showerror(\"エラー\", f\"予期しないエラーが発生しました: {e}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CallbackTestApp",
        "kind": 6,
        "importPath": "test_callbacks",
        "description": "test_callbacks",
        "peekOfCode": "class CallbackTestApp:\n    \"\"\"コールバック関数のテスト用アプリケーション\"\"\"\n    def __init__(self):\n        self.root = tk.Tk()\n        self.test_results = {}\n        # モデルの初期化\n        print(\"モデルを初期化中...\")\n        self.app_settings_model = AppSettingsModel()\n        self.coordinate_model = CoordinateModel()\n        self.image_model = ImageModel()",
        "detail": "test_callbacks",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_callbacks",
        "description": "test_callbacks",
        "peekOfCode": "def main():\n    \"\"\"メイン関数\"\"\"\n    print(\"MainViewコールバック関数テスト\")\n    print(f\"開始時刻: {datetime.now()}\")\n    try:\n        app = CallbackTestApp()\n    except Exception as e:\n        print(f\"アプリケーション初期化エラー: {e}\")\n        import traceback\n        traceback.print_exc()",
        "detail": "test_callbacks",
        "documentation": {}
    },
    {
        "label": "test_type_safety",
        "kind": 2,
        "importPath": "test_type_hints",
        "description": "test_type_hints",
        "peekOfCode": "def test_type_safety():\n    \"\"\"型安全性をテスト\"\"\"\n    print(\"MainViewの型推定改善テスト\")\n    print(\"=\" * 50)\n    # MainViewのインスタンス作成\n    root = tk.Tk()\n    root.withdraw()  # ウィンドウを非表示にする\n    main_view = MainView(root)\n    # コールバック関数の定義\n    def test_callback():",
        "detail": "test_type_hints",
        "documentation": {}
    },
    {
        "label": "test_ui_initialization",
        "kind": 2,
        "importPath": "test_ui_initialization",
        "description": "test_ui_initialization",
        "peekOfCode": "def test_ui_initialization():\n    \"\"\"UI初期化メソッドのテスト\"\"\"\n    print(\"🔧 MainView UI初期化メソッド移動テスト\")\n    print(\"=\" * 50)\n    root = tk.Tk()\n    root.withdraw()  # ウィンドウを非表示\n    print(\"1. MainViewインスタンス作成中...\")\n    try:\n        main_view = MainView(root)\n        print(\"✅ MainViewインスタンス作成成功\")",
        "detail": "test_ui_initialization",
        "documentation": {}
    }
]