name: Create Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag name (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    # ジョブが確実に実行されるように条件を明確に設定
    if: always()

    # GitHub Releases作成に必要な権限を追加
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

      - name: Set tag name
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

          # デバッグ出力
          echo "Set tag name: ${GITHUB_REF#refs/tags/}"

      - name: Create tag (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.set_tag.outputs.tag_name }}
          git push origin ${{ steps.set_tag.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for build workflow
        run: |
          echo "Waiting for build workflow to complete..."
          sleep 30

      - name: Check build workflow status
        id: build_status
        run: |
          # タグまたはコミットSHAで最新のビルドワークフロー実行を取得
          echo "Looking for build workflow runs..."

          # 複数の条件で検索
          RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/build-executables.yml/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"${{ github.sha }}\" or .head_branch == \"${{ steps.set_tag.outputs.tag_name }}\" or .event == \"push\") | .id" | head -1)

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
            echo "No build workflow found for SHA: ${{ github.sha }}"
            echo "Checking recent runs..."
            gh api repos/${{ github.repository }}/actions/workflows/build-executables.yml/runs --jq '.workflow_runs[0:3] | .[] | {id: .id, sha: .head_sha, branch: .head_branch, event: .event, status: .status}'
            exit 1
          fi

          echo "build_run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Found build run: $RUN_ID"

          # Wait for workflow to complete
          for i in {1..30}; do
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq '.status')
            CONCLUSION=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq '.conclusion')

            echo "Build status: $STATUS, conclusion: $CONCLUSION"

            if [ "$STATUS" == "completed" ]; then
              if [ "$CONCLUSION" == "success" ]; then
                echo "Build completed successfully"
                break
              else
                echo "Build failed with conclusion: $CONCLUSION"
                exit 1
              fi
            fi

            echo "Waiting for build to complete... (attempt $i/30)"
            sleep 60
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        run: |
          # Download artifacts from the build workflow
          echo "Downloading artifacts from build run: ${{ steps.build_status.outputs.build_run_id }}"

          # アーティファクト一覧を取得
          ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/runs/${{ steps.build_status.outputs.build_run_id }}/artifacts --jq '.artifacts[]')

          if [ -z "$ARTIFACTS" ]; then
            echo "No artifacts found"
            exit 1
          fi

          echo "Found artifacts:"
          echo "$ARTIFACTS" | jq -r '.name'

          # 各アーティファクトをダウンロード
          echo "$ARTIFACTS" | jq -r '"artifact_name=" + .name + " artifact_url=" + .archive_download_url' | while read line; do
            eval $line
            echo "Downloading artifact: $artifact_name"
            gh api "$artifact_url" > "${artifact_name}.zip"
            unzip "${artifact_name}.zip"
            rm "${artifact_name}.zip"
          done

          # ダウンロードしたファイルを確認
          echo "Downloaded files:"
          ls -la *.zip *.tar.gz 2>/dev/null || echo "No archive files found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_tag.outputs.tag_name }}
          name: Release ${{ steps.set_tag.outputs.tag_name }}
          files: |
            *.zip
            *.tar.gz
          draft: false
          prerelease: ${{ steps.set_tag.outputs.prerelease == 'true' }}
          generate_release_notes: true
          body: |
            ## 🚀 自動ビルドリリース ${{ steps.set_tag.outputs.tag_name }}

            このリリースは自動ビルドシステムによって生成されました。

            ### 📥 ダウンロード

            - **Windows x86**: `image-coords-app-windows-x86.zip`
            - **Windows x64**: `image-coords-app-windows-x64.zip`
            - **macOS Apple Silicon**: `image-coords-app-macos-silicon.tar.gz`

            ### 📋 インストール手順

            #### Windows
            1. ZIPファイルをダウンロードして解凍
            2. `image_coords_app.exe`を実行

            #### macOS
            1. TAR.GZファイルをダウンロードして解凍
            2. 以下のコマンドでセキュリティブロックを解除：
               ```bash
               xattr -d com.apple.quarantine image_coords_app.app
               ```
            3. `image_coords_app.app`をダブルクリックで実行

            ### 🆕 主な機能

            - 画像上での座標入力
            - 不良検出ポイントのマーキング
            - 座標データの保存・読み込み
            - カスタマイズ可能な設定

            詳細な使用方法は [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) をご覧ください。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
