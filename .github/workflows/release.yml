name: Create Release

# GitHub Releases作成に必要な権限をワークフローレベルで設定
permissions:
  contents: write
  actions: read
  pull-requests: read

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Release tag name (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    # ジョブが確実に実行されるように条件を明確に設定
    if: always()

    # GitHub Releases作成に必要な権限を追加
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify GitHub token permissions
        run: |
          echo "Checking GitHub token permissions..."
          gh api user --jq '.login' || echo "Token validation failed"
          gh api repos/${{ github.repository }} --jq '.permissions' || echo "Repository permissions check failed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"

      - name: Set tag name
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

          # デバッグ出力
          echo "Set tag name: ${GITHUB_REF#refs/tags/}"

      - name: Create tag (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.set_tag.outputs.tag_name }}
          git push origin ${{ steps.set_tag.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for build workflow
        run: |
          echo "Waiting for build workflow to complete..."
          sleep 30

      - name: Check build workflow status
        id: build_status
        run: |
          # タグまたはコミットSHAで最新のビルドワークフロー実行を取得
          echo "Looking for build workflow runs..."
          echo "Target SHA: ${{ github.sha }}"
          echo "Target tag: ${{ steps.set_tag.outputs.tag_name }}"

          # より広範囲でワークフロー実行を検索
          RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/build-executables.yml/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"${{ github.sha }}\" or .head_branch == \"refs/tags/${{ steps.set_tag.outputs.tag_name }}\" or (.event == \"push\" and .status != \"cancelled\")) | .id" | head -1)

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
            echo "No build workflow found for SHA: ${{ github.sha }}"
            echo "Trying alternative search..."
            
            # 最新のpushイベントによるワークフローを検索
            RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/build-executables.yml/runs \
              --jq ".workflow_runs[] | select(.event == \"push\" and .status == \"completed\" and .conclusion == \"success\") | .id" | head -1)
          fi

          if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
            echo "No successful build workflow found"
            echo "Recent workflow runs:"
            gh api repos/${{ github.repository }}/actions/workflows/build-executables.yml/runs --jq '.workflow_runs[0:5] | .[] | {id: .id, sha: .head_sha, branch: .head_branch, event: .event, status: .status, conclusion: .conclusion}'
            exit 1
          fi

          echo "build_run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Found build run: $RUN_ID"

          # ワークフロー実行の詳細を確認
          gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq '{id: .id, status: .status, conclusion: .conclusion, head_sha: .head_sha}'

          # ワークフローが完了するまで待機
          for i in {1..30}; do
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq '.status')
            CONCLUSION=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq '.conclusion')

            echo "Build status: $STATUS, conclusion: $CONCLUSION"

            if [ "$STATUS" == "completed" ]; then
              if [ "$CONCLUSION" == "success" ]; then
                echo "✅ Build completed successfully"
                break
              else
                echo "❌ Build failed with conclusion: $CONCLUSION"
                exit 1
              fi
            fi

            echo "⏳ Waiting for build to complete... (attempt $i/30)"
            sleep 60
          done

          if [ "$STATUS" != "completed" ]; then
            echo "❌ Build workflow did not complete within timeout"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.build_status.outputs.build_run_id }}
          path: ./downloads

      - name: Organize downloaded artifacts
        run: |
          echo "Contents of downloads directory:"
          find ./downloads -type f -name "*.zip" | head -20
          
          # アーティファクトを整理
          mkdir -p ./release-files
          
          # 各アーティファクトディレクトリからZIPファイルを移動
          for artifact_dir in ./downloads/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              
              # ZIPファイルを探してコピー
              find "$artifact_dir" -name "*.zip" -exec cp {} "./release-files/" \;
            fi
          done
          
          # 最終的なファイル一覧
          echo "Files ready for release:"
          ls -la ./release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_tag.outputs.tag_name }}
          name: Release ${{ steps.set_tag.outputs.tag_name }}
          files: |
            ./release-files/*.zip
          draft: false
          prerelease: ${{ steps.set_tag.outputs.prerelease == 'true' }}
          generate_release_notes: true
          body: |
            ## 🚀 自動ビルドリリース ${{ steps.set_tag.outputs.tag_name }}

            このリリースは自動ビルドシステムによって生成されました。

            ### 📥 ダウンロード

            - **Windows x86**: `image-coords-app-windows-x86.zip` 🔒 **コード署名済み**
            - **Windows x64**: `image-coords-app-windows-x64.zip` 🔒 **コード署名済み**

            ### 📋 インストール手順

            #### Windows
            1. ZIPファイルをダウンロードして解凍
            2. `image_coords_app.exe`を実行
            3. **初回実行時**: Windows Defenderの警告が表示される場合は「詳細情報」→「実行」をクリック

            **セキュリティについて:**
            - ✅ コード署名により、ウイルス対策ソフトでの誤検知を大幅に軽減
            - ✅ 自己署名証明書使用のため、初回実行時に警告が表示される場合があります
            - ✅ アプリケーションは安全です

            ### 🆕 主な機能

            - 画像上での座標入力
            - 不良検出ポイントのマーキング
            - 座標データの保存・読み込み
            - カスタマイズ可能な設定

            詳細な使用方法は [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) をご覧ください。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (Alternative using gh CLI)
        if: failure()
        run: |
          echo "Trying alternative release creation method using gh CLI..."

          # リリースノートを作成
          cat > release_notes.md << 'EOF'
          ## 🚀 自動ビルドリリース ${{ steps.set_tag.outputs.tag_name }}

          このリリースは自動ビルドシステムによって生成されました。

          ### 📥 ダウンロード

          - **Windows x86**: `image-coords-app-windows-x86.zip` 🔒 **コード署名済み**
          - **Windows x64**: `image-coords-app-windows-x64.zip` 🔒 **コード署名済み**

          ### 📋 インストール手順

          #### Windows
          1. ZIPファイルをダウンロードして解凍
          2. `image_coords_app.exe`を実行
          3. **初回実行時**: Windows Defenderの警告が表示される場合は「詳細情報」→「実行」をクリック

          **セキュリティについて:**
          - ✅ コード署名により、ウイルス対策ソフトでの誤検知を大幅に軽減
          - ✅ 自己署名証明書使用のため、初回実行時に警告が表示される場合があります
          - ✅ アプリケーションは安全です

          詳細な使用方法は [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) をご覧ください。
          EOF

          # gh CLIでリリースを作成
          PRERELEASE_FLAG=""
          if [ "${{ steps.set_tag.outputs.prerelease }}" == "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          gh release create "${{ steps.set_tag.outputs.tag_name }}" \
            --title "Release ${{ steps.set_tag.outputs.tag_name }}" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            ./release-files/*.zip 2>/dev/null || echo "No archive files to upload"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
