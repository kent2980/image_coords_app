name: Build Executables

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x86
          - os: windows-latest
            arch: x86
            python-arch: x86
            artifact-name: image-coords-app-windows-x86
            executable-name: image_coords_app.exe

          # Windows x64
          - os: windows-latest
            arch: x64
            python-arch: x64
            artifact-name: image-coords-app-windows-x64
            executable-name: image_coords_app.exe

    runs-on: ${{ matrix.os }}

    env:
      ENABLE_CODE_SIGNING: true # コード署名を無効化（テスト用）

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          architecture: ${{ matrix.python-arch }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install pillow
          pip install pyinstaller

      - name: Verify Python architecture (Windows)
        if: runner.os == 'Windows'
        run: |
          python -c "import platform; print(f'Python architecture: {platform.architecture()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"

      - name: Test import dependencies
        run: |
          python -c "import tkinter; print('tkinter OK')"
          python -c "from PIL import Image; print('PIL OK')"
          python -c "import sys; print(f'Python path: {sys.executable}')"

      - name: Generate application icons
        run: |
          python generate_icon.py

      - name: Verify generated icons (Windows)
        if: runner.os == 'Windows'
        run: |
          dir assets\icons\

      - name: Create spec file script (Windows)
        run: |
          @'
          spec_content = """# -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['main.py'],
              pathex=['.'],
              binaries=[],
              datas=[
                  ('src', 'src'),
              ],
              hiddenimports=[
                  'PIL._tkinter_finder',
                  'PIL.ImageTk',
                  'tkinter',
                  'tkinter.ttk',
                  'tkinter.messagebox',
                  'tkinter.filedialog',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name="image_coords_app",
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch="${{ matrix.arch }}",
              codesign_identity=None,
              entitlements_file=None,
              icon="assets/icons/app_icon.ico",
          )
          """

          with open('image_coords_app.spec', 'w') as f:
              f.write(spec_content)
          '@ | Out-File -FilePath "create_spec.py" -Encoding utf8
        if: runner.os == 'Windows'

      - name: Generate spec file
        run: python create_spec.py

      - name: Build with PyInstaller
        run: |
          pyinstaller image_coords_app.spec --clean --noconfirm

      - name: Code signing status
        if: runner.os == 'Windows'
        run: |
          if ($env:ENABLE_CODE_SIGNING -eq 'true') {
            Write-Host "✅ Code signing is ENABLED"
          } else {
            Write-Host "⚠️  Code signing is DISABLED"
            Write-Host "📝 The executable will not be digitally signed"
            Write-Host "🔧 Set ENABLE_CODE_SIGNING=true to enable signing"
          }

      - name: Setup Windows SDK for signtool (Windows)
        if: runner.os == 'Windows' && env.ENABLE_CODE_SIGNING == 'true'
        run: |
          # GitHub Actions Windows runners には既にWindows SDKがインストールされている
          Write-Host "🔍 Locating signtool.exe on GitHub Actions runner..."

          # GitHub Actions runners で利用可能なパスを検索
          $searchPaths = @(
            # Windows 11 SDK paths (GitHub Actions runners typically have these)
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.20348.0\x64\signtool.exe",
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe",
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe"
          )

          $foundSigntool = $null
          foreach ($path in $searchPaths) {
            if (Test-Path $path) {
              $foundSigntool = $path
              Write-Host "✅ Found signtool.exe at: $path"
              break
            }
          }

          if (-not $foundSigntool) {
            # 利用可能なSDKバージョンを確認
            Write-Host "Available Windows SDK versions:"
            if (Test-Path "${env:ProgramFiles(x86)}\Windows Kits\10\bin\") {
              Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\10\bin\" | ForEach-Object {
                $signtoolPath = Join-Path $_.FullName "x64\signtool.exe"
                if (Test-Path $signtoolPath) {
                  Write-Host "  Found signtool at: $signtoolPath"
                  if (-not $foundSigntool) { $foundSigntool = $signtoolPath }
                }
              }
            }
          }

          if (-not $foundSigntool) {
            Write-Error "❌ No signtool.exe found on this runner"
            Write-Host "Available directories in Windows Kits:"
            Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\" -ErrorAction SilentlyContinue
            exit 1
          }

          # signtoolパスを環境変数に保存
          "SIGNTOOL_PATH=$foundSigntool" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "✅ signtool.exe located and ready for use"

      - name: Create self-signed certificate for code signing (Windows)
        if: runner.os == 'Windows' && env.ENABLE_CODE_SIGNING == 'true'
        run: |
          # GitHub Secretsに証明書がある場合はそれを使用、なければ自己署名証明書を作成
          try {
            if ($env:CODE_SIGN_CERT -and $env:CODE_SIGN_PASSWORD) {
              Write-Host "🔷 Using production certificate from GitHub Secrets"
              [System.IO.File]::WriteAllBytes("codesign.pfx", [System.Convert]::FromBase64String($env:CODE_SIGN_CERT))
              $certPassword = $env:CODE_SIGN_PASSWORD
              Write-Host "✅ Production certificate loaded successfully"
            } else {
              Write-Host "🔶 Creating self-signed certificate for development"
              Write-Host "📝 Note: Self-signed certificates will show security warnings to users"

              # 自己署名証明書を作成（開発用）
              $cert = New-SelfSignedCertificate -Subject "CN=ImageCoordsApp Developer" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "ImageCoordsApp Code Signing Certificate" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -HashAlgorithm SHA256 -NotAfter (Get-Date).AddYears(3)

              if (-not $cert) {
                throw "Failed to create self-signed certificate"
              }

              # 証明書をファイルにエクスポート
              $certPassword = "temp123"
              $password = ConvertTo-SecureString -String $certPassword -Force -AsPlainText
              Export-PfxCertificate -Cert $cert -FilePath "codesign.pfx" -Password $password -ErrorAction Stop

              # ファイルが作成されたか確認
              if (-not (Test-Path "codesign.pfx")) {
                throw "Failed to export certificate to PFX file"
              }

              # 証明書情報を表示
              Write-Host "✅ Self-signed certificate created successfully"
              Write-Host "   Subject: $($cert.Subject)"
              Write-Host "   Thumbprint: $($cert.Thumbprint)"
              Write-Host "   Valid until: $($cert.NotAfter)"
            }

            # 証明書パスワードを環境変数に保存（後続ステップで使用）
            "CERT_PASSWORD=$certPassword" | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "✅ Certificate setup completed"

          } catch {
            Write-Error "❌ Certificate setup failed: $($_.Exception.Message)"
            Write-Host "Stack Trace: $($_.ScriptStackTrace)"
            exit 1
          }
        env:
          CODE_SIGN_CERT: ${{ secrets.CODE_SIGN_CERT }}
          CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGN_PASSWORD }}

      - name: Sign executable with signtool (Windows)
        if: runner.os == 'Windows' && env.ENABLE_CODE_SIGNING == 'true'
        run: |
          Write-Host "� Starting code signing process..."

          # 環境変数からsigntoolパスを取得
          $signtoolPath = $env:SIGNTOOL_PATH
          if (-not $signtoolPath -or -not (Test-Path $signtoolPath)) {
            Write-Error "❌ signtool.exe path not found in environment variables"
            exit 1
          }

          Write-Host "Using signtool at: $signtoolPath"
          Write-Host "Target executable: dist\image_coords_app.exe"

          # 実行ファイルの存在確認
          if (-not (Test-Path "dist\image_coords_app.exe")) {
            Write-Error "❌ Target executable not found: dist\image_coords_app.exe"
            Write-Host "Contents of dist directory:"
            Get-ChildItem -Path "dist" -ErrorAction SilentlyContinue
            exit 1
          }

          # 証明書ファイルの存在確認
          if (-not (Test-Path "codesign.pfx")) {
            Write-Error "❌ Certificate file not found: codesign.pfx"
            exit 1
          }

          # 実行ファイルに署名
          $signArgs = @(
            "sign",
            "/f", "codesign.pfx",
            "/p", $env:CERT_PASSWORD,
            "/fd", "SHA256",
            "/tr", "http://timestamp.sectigo.com",
            "/td", "SHA256",
            "/as",
            "dist\image_coords_app.exe"
          )

          Write-Host "Executing: signtool $($signArgs -join ' ')"
          try {
            & $signtoolPath @signArgs

            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Code signing completed successfully"

              # 署名を検証（自己署名証明書の場合はエラーを無視）
              Write-Host "Verifying signature..."
              & $signtoolPath verify /pa /v "dist\image_coords_app.exe" 2>&1 | Tee-Object -Variable verifyOutput

              # 検証結果に関係なく、署名プロセス自体は成功とみなす
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Signature verification successful - Trusted certificate chain"
              } else {
                Write-Host "⚠️  Signature verification returned warnings/errors:"
                Write-Host $verifyOutput
                Write-Host "📝 This is expected for self-signed certificates"
                Write-Host "✅ Code signing process completed successfully"
                # 自己署名証明書の場合は検証エラーを正常として扱う
                $global:LASTEXITCODE = 0
              }
            } else {
              Write-Error "❌ Code signing failed with exit code: $LASTEXITCODE"
              exit 1
            }
          } catch {
            Write-Error "❌ Exception during code signing: $($_.Exception.Message)"
            exit 1
          }

      - name: Verify executable (Windows)
        if: runner.os == 'Windows'
        run: |
          dir dist
          if (Test-Path "dist/image_coords_app.exe") {
            Write-Host "Executable created successfully"
            Get-Item "dist/image_coords_app.exe" | Select-Object Name, Length, CreationTime

            # 署名情報を確認
            Write-Host ""
            Write-Host "🔍 Code Signature Analysis"
            Write-Host "=========================="
            $signature = Get-AuthenticodeSignature "dist/image_coords_app.exe"

            Write-Host "Signature Status: $($signature.Status)"

            if ($signature.SignerCertificate) {
              Write-Host "📋 Certificate Details:"
              Write-Host "  Subject: $($signature.SignerCertificate.Subject)"
              Write-Host "  Issuer: $($signature.SignerCertificate.Issuer)"
              Write-Host "  Valid From: $($signature.SignerCertificate.NotBefore)"
              Write-Host "  Valid Until: $($signature.SignerCertificate.NotAfter)"
              Write-Host "  Thumbprint: $($signature.SignerCertificate.Thumbprint)"

              # 証明書の種類を判定
              if ($signature.SignerCertificate.Subject -eq $signature.SignerCertificate.Issuer) {
                Write-Host "  Type: 🔶 Self-signed certificate (Development)"
              } else {
                Write-Host "  Type: 🔷 CA-issued certificate (Production)"
              }
            }

            # タイムスタンプ情報
            if ($signature.TimeStamperCertificate) {
              Write-Host "⏰ Timestamp Certificate:"
              Write-Host "  Issuer: $($signature.TimeStamperCertificate.Issuer)"
              Write-Host "  Valid Until: $($signature.TimeStamperCertificate.NotAfter)"
            }

            Write-Host ""

            # 署名の有効性に関する説明
            switch ($signature.Status) {
              "Valid" {
                Write-Host "✅ Signature is valid and trusted"
              }
              "UnknownError" {
                Write-Host "⚠️  Unknown signature error - may be self-signed"
              }
              "NotSigned" {
                Write-Host "❌ File is not signed"
              }
              default {
                Write-Host "ℹ️  Signature status: $($signature.Status)"
              }
            }
          } else {
            Write-Host "Executable not found!"
            exit 1
          }

      - name: Cleanup signing materials (Windows)
        if: runner.os == 'Windows' && env.ENABLE_CODE_SIGNING == 'true' && always()
        run: |
          # セキュリティのため、証明書ファイルを削除
          if (Test-Path "codesign.pfx") {
            Remove-Item "codesign.pfx" -Force
            Write-Host "🗑️  Certificate file cleaned up for security"
          } else {
            Write-Host "ℹ️  No certificate file found to clean up"
          }

      - name: Create distribution directory
        run: |
          if ('${{ runner.os }}' -eq 'Windows') {
            New-Item -ItemType Directory -Path "release\${{ matrix.artifact-name }}" -Force
          } else {
            mkdir -p release/${{ matrix.artifact-name }}
          }

      - name: Copy executable and resources (Windows)
        if: runner.os == 'Windows'
        run: |
          copy dist\image_coords_app.exe release\${{ matrix.artifact-name }}
          if (Test-Path "*.ini") { copy *.ini release\${{ matrix.artifact-name }}\ }
          if (Test-Path "coords.txt") { copy coords.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "defects.txt") { copy defects.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "models.txt") { copy models.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "worker.csv") { copy worker.csv release\${{ matrix.artifact-name }}\ }
          if (Test-Path "lot_number_info.json") { copy lot_number_info.json release\${{ matrix.artifact-name }}\ }

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "release\${{ matrix.artifact-name }}\*" -DestinationPath "${{ matrix.artifact-name }}.zip"

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}.zip
          retention-days: 30
