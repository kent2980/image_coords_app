name: Build Executables

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x86
          - os: windows-latest
            arch: x86
            python-arch: x86
            artifact-name: image-coords-app-windows-x86
            executable-name: image_coords_app.exe

          # Windows x64
          - os: windows-latest
            arch: x64
            python-arch: x64
            artifact-name: image-coords-app-windows-x64
            executable-name: image_coords_app.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          architecture: ${{ matrix.python-arch }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install pillow
          pip install pyinstaller

      - name: Verify Python architecture (Windows)
        if: runner.os == 'Windows'
        run: |
          python -c "import platform; print(f'Python architecture: {platform.architecture()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"

      - name: Test import dependencies
        run: |
          python -c "import tkinter; print('tkinter OK')"
          python -c "from PIL import Image; print('PIL OK')"
          python -c "import sys; print(f'Python path: {sys.executable}')"

      - name: Generate application icons
        run: |
          python generate_icon.py

      - name: Verify generated icons (Windows)
        if: runner.os == 'Windows'
        run: |
          dir assets\icons\

      - name: Create spec file script (Windows)
        run: |
          @'
          spec_content = """# -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['main.py'],
              pathex=['.'],
              binaries=[],
              datas=[
                  ('src', 'src'),
              ],
              hiddenimports=[
                  'PIL._tkinter_finder',
                  'PIL.ImageTk',
                  'tkinter',
                  'tkinter.ttk',
                  'tkinter.messagebox',
                  'tkinter.filedialog',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name="image_coords_app",
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch="${{ matrix.arch }}",
              codesign_identity=None,
              entitlements_file=None,
          )
          """

          with open('image_coords_app.spec', 'w') as f:
              f.write(spec_content)
          '@ | Out-File -FilePath "create_spec.py" -Encoding utf8
        if: runner.os == 'Windows'

      - name: Generate spec file
        run: python create_spec.py

      - name: Build with PyInstaller
        run: |
          pyinstaller image_coords_app.spec --clean --noconfirm

      - name: Install Windows SDK for signtool (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows SDKをインストール（signtool.exeを含む）
          choco install windows-sdk-10-version-2004-all

      - name: Create self-signed certificate for code signing (Windows)
        if: runner.os == 'Windows'
        run: |
          # GitHub Secretsに証明書がある場合はそれを使用、なければ自己署名証明書を作成
          if ($env:CODE_SIGN_CERT -and $env:CODE_SIGN_PASSWORD) {
            Write-Host "Using certificate from GitHub Secrets"
            [System.IO.File]::WriteAllBytes("codesign.pfx", [System.Convert]::FromBase64String($env:CODE_SIGN_CERT))
            $certPassword = $env:CODE_SIGN_PASSWORD
          } else {
            Write-Host "Creating self-signed certificate for development"
            # 自己署名証明書を作成（開発用）
            $cert = New-SelfSignedCertificate -Subject "CN=ImageCoordsApp Developer" -Type CodeSigning -KeyUsage DigitalSignature -FriendlyName "ImageCoordsApp Code Signing Certificate" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -HashAlgorithm SHA256 -NotAfter (Get-Date).AddYears(3)

            # 証明書をファイルにエクスポート
            $certPassword = "temp123"
            $password = ConvertTo-SecureString -String $certPassword -Force -AsPlainText
            Export-PfxCertificate -Cert $cert -FilePath "codesign.pfx" -Password $password

            # 証明書情報を表示
            Write-Host "Certificate created: $($cert.Subject)"
            Write-Host "Certificate thumbprint: $($cert.Thumbprint)"
          }

          # 証明書パスワードを環境変数に保存（後続ステップで使用）
          "CERT_PASSWORD=$certPassword" | Out-File -FilePath $env:GITHUB_ENV -Append
        env:
          CODE_SIGN_CERT: ${{ secrets.CODE_SIGN_CERT }}
          CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGN_PASSWORD }}

      - name: Sign executable with signtool (Windows)
        if: runner.os == 'Windows'
        run: |
          # signtool.exeのパスを確認
          $signtoolPath = Get-Command signtool.exe -ErrorAction SilentlyContinue
          if (-not $signtoolPath) {
            # Windows SDK 10の一般的なパス
            $possiblePaths = @(
              "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
              "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.20348.0\x64\signtool.exe",
              "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe",
              "${env:ProgramFiles}\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
            )

            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                $signtoolPath = $path
                break
              }
            }
          } else {
            $signtoolPath = $signtoolPath.Source
          }

          if (-not $signtoolPath -or -not (Test-Path $signtoolPath)) {
            Write-Host "signtool.exe not found in common locations. Searching..."
            $foundPaths = Get-ChildItem -Path "${env:ProgramFiles(x86)}\Windows Kits\" -Recurse -Name "signtool.exe" -ErrorAction SilentlyContinue
            if ($foundPaths) {
              Write-Host "Found signtool.exe at:"
              $foundPaths | ForEach-Object { Write-Host "  $_" }
              $signtoolPath = Join-Path "${env:ProgramFiles(x86)}\Windows Kits\" $foundPaths[0]
            } else {
              Write-Error "signtool.exe not found anywhere in Windows Kits directory"
              exit 1
            }
          }

          Write-Host "Using signtool at: $signtoolPath"

          # 実行ファイルに署名
          $signArgs = @(
            "sign",
            "/f", "codesign.pfx",
            "/p", $env:CERT_PASSWORD,
            "/fd", "SHA256",
            "/tr", "http://timestamp.sectigo.com",
            "/td", "SHA256",
            "/as",
            "dist\image_coords_app.exe"
          )

          Write-Host "Signing executable..."
          & $signtoolPath @signArgs

          if ($LASTEXITCODE -eq 0) {
            Write-Host "Code signing completed successfully"

            # 署名を検証
            Write-Host "Verifying signature..."
            & $signtoolPath verify /pa /v "dist\image_coords_app.exe"

            if ($LASTEXITCODE -eq 0) {
              Write-Host "Signature verification successful"
            } else {
              Write-Warning "Signature verification failed, but this may be expected for self-signed certificates"
            }
          } else {
            Write-Error "Code signing failed with exit code: $LASTEXITCODE"
            exit 1
          }

      - name: Verify executable (Windows)
        if: runner.os == 'Windows'
        run: |
          dir dist
          if (Test-Path "dist/image_coords_app.exe") {
            Write-Host "Executable created successfully"
            Get-Item "dist/image_coords_app.exe" | Select-Object Name, Length, CreationTime

            # 署名情報を確認
            Write-Host "Checking code signature..."
            $signature = Get-AuthenticodeSignature "dist/image_coords_app.exe"
            Write-Host "Signature Status: $($signature.Status)"
            Write-Host "Signature Certificate Subject: $($signature.SignerCertificate.Subject)"
            Write-Host "Signature Certificate Issuer: $($signature.SignerCertificate.Issuer)"
            Write-Host "Signature Certificate Valid From: $($signature.SignerCertificate.NotBefore)"
            Write-Host "Signature Certificate Valid Until: $($signature.SignerCertificate.NotAfter)"
          } else {
            Write-Host "Executable not found!"
            exit 1
          }

      - name: Cleanup signing materials (Windows)
        if: runner.os == 'Windows' && always()
        run: |
          # セキュリティのため、証明書ファイルを削除
          if (Test-Path "codesign.pfx") {
            Remove-Item "codesign.pfx" -Force
            Write-Host "Certificate file cleaned up"
          }

      - name: Create distribution directory
        run: |
          mkdir -p release/${{ matrix.artifact-name }}

      - name: Copy executable and resources (Windows)
        if: runner.os == 'Windows'
        run: |
          copy dist\image_coords_app.exe release\${{ matrix.artifact-name }}
          if (Test-Path "*.ini") { copy *.ini release\${{ matrix.artifact-name }}\ }
          if (Test-Path "coords.txt") { copy coords.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "defects.txt") { copy defects.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "models.txt") { copy models.txt release\${{ matrix.artifact-name }}\ }
          if (Test-Path "worker.csv") { copy worker.csv release\${{ matrix.artifact-name }}\ }
          if (Test-Path "lot_number_info.json") { copy lot_number_info.json release\${{ matrix.artifact-name }}\ }

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "release\${{ matrix.artifact-name }}\*" -DestinationPath "${{ matrix.artifact-name }}.zip"

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}.zip
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/image-coords-app-windows-x86/*.zip
            artifacts/image-coords-app-windows-x64/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
